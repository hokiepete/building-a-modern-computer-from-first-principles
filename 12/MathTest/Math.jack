// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array arr;
    /** Initializes the library. */
    function void init() {
        var int i, j; 
        let arr = Array.new(16);
        let i = 0;
        let j = 1;
        while (i < 16){
          let arr[i] = j;
          let j = j + j;
          let i = i + 1;
        }
        // let arr[0] = 1;
        // let arr[1] = 2;
        // let arr[2] = 4;
        // let arr[3] = 8;
        // let arr[4] = 16;
        // let arr[5] = 32;
        // let arr[6] = 64;
        // let arr[7] = 128;
        // let arr[8] = 256;
        // let arr[9] = 512;
        // let arr[10] = 1024;
        // let arr[11] = 2048;
        // let arr[12] = 4096;
        // let arr[13] = 8192;
        // let arr[14] = 16384;
        // let arr[15] = -1;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }else{
            return x;
        }
    }

    function bool bit(int x, int i){
        return x & arr[i] > 0;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var bool negx, negy;
        if (x < 0){
            let x = Math.abs(x);
            let negx = true;
        }else{
            let negx = false;
        }
        if (y < 0){
            let y = Math.abs(y);
            let negy = true;
        }else{
            let negy = false;
        }
        let sum = Math.multiplication(x, y);
        if ((negx & negy) | (~negx & ~negy)){
            return sum;
        }else{
            return -sum;
        }
    }
    
    function int multiplication(int x, int y){
        var int sum, shiftedx, i;
        let sum = 0;
        let shiftedx = x;
        let i = 0;
        while (i<16){
            if(Math.bit(y, i)){
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var bool negx, negy;
        if (x < 0){
            let x = Math.abs(x);
            let negx = true;
        }else{
            let negx = false;
        }
        if (y < 0){
            let y = Math.abs(y);
            let negy = true;
        }else{
            let negy = false;
        }
        let q = Math.division(x, y);
        if ((negx & negy) | (~negx & ~negy)){
            return q;
        }else{
            return -q;
        }
    }

    function int division(int x, int y){
        var int q, prod;
        if (y > x){
            return 0;
        }
        let q = Math.division(x, y+y);
        let prod = 2 * q * y;
        if (prod < 0){
            do Output.printString("Overflow error during division.");
            return 0;
        }
        if ((x - prod) < y){
            return q + q;
        }else{
            return (q + q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, exp;
        if (x < 0){
            return 0;
        }
        let y = 0;
        let j = 7;
        while (j > -1){
            let exp = (y + arr[j])*(y + arr[j]);
            if (((exp < x) | (exp = x)) & (exp > 0)){
                let y = y + arr[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }else{
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }else{
            return b;
        }
    }
}
