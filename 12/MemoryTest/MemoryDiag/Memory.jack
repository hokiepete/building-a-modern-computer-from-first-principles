// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array freelist, mem;
    static int heapbase, space, next;
    /** Initializes the class. */
    function void init() {
        let mem = 0;
        let heapbase = 2048;
        let freelist = heapbase;
        let space = 0;
        let next = 1;
        let freelist[space] = 14335;
        let freelist[next] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let mem[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array new, curr, prev;
        let curr = freelist;
        let prev = -1;
        while(curr[space] <  (size + 3)){
            let prev = curr;
            let curr = curr[next];
            if (curr = null){
                return -1;
            }
        }

        let new = curr + size + 2;
        let new[space] = curr[space] - size - 2;
        let new[next] = curr[next];
        let curr[space] = size + 2;
        let curr[next] = 0;
        if (prev = -1){
            let freelist = new; 
        }else{
            let prev[next] = new;
        }
        return curr + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array tmp;
        let tmp = o - 2;
        let tmp[next] = freelist;
        let freelist = tmp;
        return;
    }    
}
