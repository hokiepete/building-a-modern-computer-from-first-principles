// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static bool color;
    static Array pixels;
    /** Initializes the Screen. */
    function void init() {
        var int i, n;
        let color = true;
        let pixels = Array.new(16);
        // let i = 15;
        // let n = 1;
        // while (i>-1){
        //     let pixels[i] = n;
        //     let n = n+n;
        //     let i = i - 1;
        // }
        let i = 0;
        let n = 1;
        while (i<16){
            let pixels[i] = n;
            let n = n+n;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var bool tempColor;
        let tempColor = color;
        let color = false;
        do Screen.drawRectangle(0, 0, 511, 255);
        let color = tempColor;
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // bit = col % 16
        // ram = 16384 + row * 32 + col / 16
        // 0 <= col <= 511;
        // 0 <= row <= 255;
        var int mod, block, ram, div;
        
        let div = x / 16;
        let ram = 16384 + (32*y) + div;
        let  mod = x - (div * 16);
        let block = Memory.peek(ram);
        if (color){
            let block = block | pixels[mod];
        }else{
            let block = block & (~pixels[mod]);
        }
        do Memory.poke(ram, block);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, x, y, enda, endb;
        if (x1 = x2) {
            do Screen.vline(x1, y1, y2);
            return;
        }
        if (y1 = y2){
            do Screen.hline(x1, x2, y1);
            return;
        }
        let x = x1;
        let y = y1;
        let a = 0;
        let b = 0;
        let diff = 0;

        if ((x1 < x2) & (y1 < y2)){
            let dx = x2 - x1;
            let dy = y2 - y1;
            let enda = dx + 1;
            let endb = dy + 1;
            while ((a < enda) & (b < endb)){
                do Screen.drawPixel(x+a, y+b);
                if (diff < 0){
                    let a = a + 1;
                    let diff = diff + dy;
                }else{
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        
        if ((x1 > x2) & (y1 < y2)){
            let dx = x1 - x2;
            let dy = y2 - y1;
            let enda = dx + 1;
            let endb = dy + 1;
            while ((a < enda) & (b < endb)){
                do Screen.drawPixel(x-a, y+b);
                if (diff < 0){
                    let a = a + 1;
                    let diff = diff + dy;
                }else{
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }

        if ((x1 < x2) & (y1 > y2)){
            let dx = x2 - x1;
            let dy = y1 - y2;
            let enda = dx + 1;
            let endb = dy + 1;
            while ((a < enda) & (b < endb)){
                do Screen.drawPixel(x+a, y-b);
                if (diff < 0){
                    let a = a + 1;
                    let diff = diff + dy;
                }else{
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }

        if ((x1 > x2) & (y1 > y2)){
            let dx = x1 - x2;
            let dy = y1 - y2;
            let enda = dx + 1;
            let endb = dy + 1;
            while ((a < enda) & (b < endb)){
                do Screen.drawPixel(x-a, y-b);
                if (diff < 0){
                    let a = a + 1;
                    let diff = diff + dy;
                }else{
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }

        return;
    }

    function void vline(int x, int y1, int y2) {
        var int y, end;
        if (y1 < y2){
            let y = y1;
            let end = y2 + 1;
        }else{
            let y = y2;
            let end = y1 + 1;
        }
        while(y < end){
            do Screen.drawPixel(x, y);
            let y = y + 1;
        }
        return;
    }

    function void hline(int x1, int x2, int y) {
        var int x, end;
        if (x1 < x2){
            let x = x1;
            let end = x2 + 1;
        }else{
            let x = x2;
            let end = x1 + 1;
        }
        while(x < end){
            do Screen.drawPixel(x, y);
            let x = x + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y, end;
        let y = y1;
        let end = y2 + 1;
        while(y < end){
            do Screen.hline(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, temp, end;
        let dy = -r;
        let end = r + 1;
        while (dy < end){
            let temp = Math.sqrt((r*r) - (dy*dy));
            do Screen.hline(x - temp, x + temp, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
