// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int maxLength, curLength;
    field Array characters;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int aMaxLength) {
        let maxLength = aMaxLength;
        let curLength = 0;
        if (maxLength > 0){
            let characters = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this); 
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j - 1) < curLength){
            return characters[j];
        }else{
            return -1;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j - 1) < curLength){
            let characters[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (curLength < maxLength){
            let characters[curLength] = c;
            let curLength = curLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (0 < curLength){
            let curLength = curLength - 1;
        }
        return;
    }

    method int str2int(int start_i){
        var int val, i;
        var char c;
        let i = start_i;
        let val = 0;
        while (i < curLength){
            let c = charAt(i);
            if ((c < 48) | (57 < c)){
                return val;
            }
            let val = (val * 10) + (c - 48);
            let i = i + 1;
        }
        return val;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        if (charAt(0) = 45){
            return - str2int(1);
        } else{
            return str2int(0);
        }
    }

    method void int2str(int val){
        var int c, lastd, div;
        let div = (val / 10);
        let lastd = val - (div * 10);
        let c = lastd + 48;
        if (9 < val){
            do int2str(div);
        }
        do appendChar(c);
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // var char c;
        let curLength = 0;
        if (val < 0){
            do appendChar(45);
            let val = -val;
        }
        do int2str(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
